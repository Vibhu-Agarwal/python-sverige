<!-- //Section - workshops Begin -->
<section id="talks" class="bg-white" style="padding-bottom: 0px;padding-top: 40px;">
  <div class="container">
    <div class="row justify-content-center pb-3">
      <div class="col-lg-9 pb-lg-3 text-center">
        <h3 class="font-alt font-w-600 letter-spacing-2 text-uppercase title-xs-small title-extra-large-2">
          Selected workshops
        </h3>
        <span class="bg-base-color d-inline-block mt-4 sep-line-thick-long"></span>
      </div>
      <!-- //.col-lg-9 -->
    </div>
    <!-- //.row -->

    <div class="row" class="pb-3" style="display: flex; justify-content: center; align-items: center">
      <div class="col-lg-9 pb-lg-4 text-center">
        <h4 class="font-alt font-w-400 letter-spacing-2 text-uppercase title-xs-small title-extra-large-2" id=pythondebuggin>
          Python Debugging: Beyond print
        </h4>
      </div>
      <!-- //.col-lg-9 -->

      <div class="col-lg-8">
        <div class="pl-lg-4 pt-5 pt-lg-0">
          <p class="font-alt text-extra-large">
            What do you do when you see an exception stacktrace? Unless it's a simple error, you examine the runtime state that caused it. Many developers do that with print and logging, which works well for simple cases but becomes complex with more moving parts involved. Fortunately, there is a built-in debugger pdb, as well as an improved iPython-powered wrapper ipdb, which lets you pause a running program, read and change its state, and control the execution flow. Ipdb is also useful in postmortem mode: one can explore the whole stacktrace right after an exception and collect all the relevant information at once instead of printing one  variable at a time. This workshop is a hands-on tutorial on ipdb in Python 3. The exercises include configuration, launching, and navigating ipdb. If we have enough time we may also look at how to extend the default debugger. The workshop aims to sharpen your debugging skills and to reduce the feedback time for  testing bug origin theories. If you bring a laptop you can follow along, but you don't have to: the slides and code will be available on Github.
          </p>
          <p class="font-alt text-extra-large">
            Author: Timofey Tipishev
          </p>
        </div>
        <!-- //.pl-lg-4 -->
      </div>
      <!-- //.col-lg-8 -->
    </div>
    <!-- //.row -->

    <div class="row" class="pb-3" style="display: flex; justify-content: center; align-items: center">
      <div class="col-lg-9 pb-lg-4 text-center">
        <h4 class="font-alt font-w-400 letter-spacing-2 text-uppercase title-xs-small title-extra-large-2" id=apachekafka>
          Python + Apache Kafka = &gt;3
        </h4>
      </div>
      <!-- //.col-lg-9 -->

      <div class="col-lg-8">
        <div class="pl-lg-4 pt-5 pt-lg-0">
          <p class="font-alt text-extra-large">
            In a very practical form, we'll master how to work with Apache Kafka using Python. The workshop will include working with Avro-serialized messages and Confluent schema registry.
          </p>
          <p class="font-alt text-extra-large">
            Author: Sergei Beilin
          </p>
        </div>
        <!-- //.pl-lg-4 -->
      </div>
      <!-- //.col-lg-8 -->
    </div>
    <!-- //.row -->

    <div class="row justify-content-center pb-3">
      <div class="row pb-5">
        <div class="col-lg-9 pb-lg-4 text-center">
          <span class="bg-base-color d-inline-block mt-4 sep-line-thick-long"></span>
        </div>
      </div>
    </div>
    <!-- //.row -->

  </div>
  <!-- //.container -->

</section>
<!-- //Section - workshops End -->
